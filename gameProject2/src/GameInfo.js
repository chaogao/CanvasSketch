Defence.GameInfo = function(size, level){	this.size = size;	this.level = 1;}Defence.GameInfo.prototype = {	"MaxCol": 8,	"MaxRow": 8,	"Maps":[[		"0", "0", "0", "0", "0", "0", "0", "0",		"0", "1", "1", "1", "0", "0", "0", "0",		"1", "1", "0", "1", "0", "0", "0", "0",		"0", "0", "0", "1", "0", "1", "1", "1",		"0", "0", "0", "1", "0", "1", "0", "0",		"0", "0", "0", "1", "0", "1", "0", "0",		"0", "0", "0", "1", "1", "1", "0", "0",		"0", "0", "0", "1", "1", "1", "0", "0"	],[		"1", "1", "0", "0", "0", "0", "0", "1",		"0", "1", "0", "0", "0", "0", "0", "1",		"0", "1", "0", "0", "0", "0", "0", "1",		"0", "1", "1", "1", "1", "1", "0", "1",		"0", "0", "0", "0", "0", "1", "0", "1",		"0", "0", "0", "0", "0", "1", "1", "1",		"0", "0", "0", "0", "0", "0", "0", "0",		"0", "0", "0", "0", "0", "0", "0", "0"	]],	"Begin":[[{"row": 2, "col": 0}],[{"row": 0, "col": 0}]],	"End":[[{"row": 3, "col": 7}],[{"row": 0, "col": 7}]]}//通过level重置游戏信息Defence.GameInfo.prototype.reset = function() {	var level = this.level;	this.wave = 10;	this.maps = this.Maps[level-1];		this.towers = [];	this.towerMap = [];	//建立tower的MAP信息。	for(var i = 0; i < this.MaxRow; i++){		var row = [];		for(var j = 0; j < this.MaxCol; j++){			row.push(0);		}		this.towerMap.push(row);	}	this.enemyStart = this.Begin[level-1];	this.enemyEnd = this.End[level-1];	this.titles = this.getTitles(this.maps);}//获取地图信息Defence.GameInfo.prototype.getTitles = function(maps){	var titles = [];	this.tileSize = new CanvasSketch.Size(Math.floor(this.size.w / this.MaxCol), Math.floor(this.size.h / this.MaxRow));	for(var i = 0, len = maps.length; i < len; i++) {		var row = Math.floor(i / this.MaxCol);		var col = i % this.MaxCol;		var position = new CanvasSketch.Position((col) * this.tileSize.w, (row+1) * this.tileSize.h);		var title = new Defence.Tile(maps[i], row, col, position, this.tileSize);		var vector = new Vector(title);		titles.push(vector);	}	return titles;}//获取敌军Defence.GameInfo.prototype.getEnemys = function(maps){	var enemysTypes = [];	this.wave--;	if(this.wave >= 0) {		//计算当前level当前wave的敌人个数。		var enemysCount = this.level * (10 - this.wave) * 10;				for(var i = 0, len = enemysCount; i < len; i++) {			if(this.wave < 5) {				var type = Math.floor(Math.random() * 2);			} else {				var type = Math.floor(Math.random() * 1);			}			enemysTypes[i] = type.toString();		}	}			return enemysTypes;}Defence.Const = {	"EnemyBaseDelay" : 20}